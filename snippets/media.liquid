{%- comment -%}
  Renders a media element for the product gallery.
  Media types include: image, video, external_video and model.
  Accepts:
  - media: {Object} Media Liquid object (required)
  - featured_media: {Object} Media Liquid object (required) - featured media of a given product or variant
  - img_sizes: {String} - A set of media conditions for `img` sizes attribute (Optional)
  - image_width: {Number} - Image width on desktop based on section settings
  - unique: {String} Section id
  - hide_controls: {Boolean} True or false - Hide video controls

  Usage:
  {%- for media in product.media -%}
    {% render 'media', media: media, featured_media: featured_media, unique: unique, hide_controls: hide_controls %}
  {%- endfor -%}
{%- endcomment -%}

{%- liquid
  assign img_sizes = img_sizes | default: ''
  assign image_widths = image_widths | default: '245, 320, 365, 410, 490, 640, 753, 848, 980, 1024, 1280, 1506, 1696, 1960'
  assign image_size = '1024x1024'
  assign image_zoom_size = '2048x2048'
  assign view_string = 'general.accessibility.view' | t
  capture media_wrapper_id
    echo 'FeaturedMedia-' | append: unique | append: '-' | append: media.id
  endcapture

  assign media_aspect_ratio = media.aspect_ratio
  unless media_aspect_ratio
    assign media_aspect_ratio = 1
  endunless
  assign media_padding_top = 1 | divided_by: media_aspect_ratio | times: 100 | round: 1

  if section.settings.image_aspect_ratio
    assign media_padding_top = section.settings.image_aspect_ratio | times: 100 | round: 1
  endif

  assign controls = true
  if hide_controls
    assign controls = false
  endif

  capture image
    assign loading = loading | default: 'lazy'
    assign preload = nil
    assign fetchpriority = nil
    assign image_alt = media.alt | strip_html | escape

    if template.name == 'product' and media == featured_media
      assign loading = 'eager'
      assign fetchpriority = 'high'
      assign preload = true
    endif

    assign sizes = '(min-width: 1400px) ' | append: image_width | append: ', (min-width: 768px) calc((100vw - 40px) * 0.6 - 30px), calc(100vw - 40px)'

    if section_type == 'quickview'
      case settings.quick_buy_image_layout
        when 'large'
          assign sizes = '(min-width: 768px) 315px, calc((100vw - 50px) / 2 - 17px)'
        when 'small'
          assign sizes = '(min-width: 768px) 163px, calc((100vw - 50px) / 2 - 17px)'
      endcase
      assign image_widths = '150, 300, 315, 330, 360, 480, 540, 630, 720'
      assign loading = 'eager'
      assign fetchpriority = 'high'
    endif

    if img_sizes != ''
      assign sizes = img_sizes
    endif

    assign image_id = media.id
    assign is_simple_img = false
    if media.media_type != 'image'
      assign image_id = nil
      assign is_simple_img = true
    endif

    render 'image', image: media.preview_image, simple: is_simple_img, widths: image_widths, sizes: sizes, loading: loading, fetchpriority: fetchpriority, preload: preload, id: image_id, alt: image_alt
  endcapture

  capture media_display
    case media.media_type
      when 'external_video'
        if media.host == 'youtube'
          echo media | external_video_url: autoplay: true, mute: true, playsinline: true, controls: controls, loop: enable_video_looping, playlist: media.external_id | external_video_tag: loading: 'lazy'
        else
          echo media | external_video_url: autoplay: true, muted: true, playsinline: true, controls: controls, loop: enable_video_looping | external_video_tag: loading: 'lazy'
        endif
      when 'video'
        echo media | media_tag: image_size: image_size, class: 'media-video', autoplay: true, muted: true, loop: enable_video_looping, controls: controls
      when 'model'
        echo media | model_viewer_tag: image_size: image_size, toggleable: true, data-model-id: media.id
      else
        echo media | media_tag: class: 'media-item', image_size: image_size
    endcase
  endcapture

  capture deferred_media_classes
    echo 'product-gallery__media deferred-media'
    echo ' product-gallery__media--' | append: media.id
    if media.media_type == 'external_video' or media.media_type == 'video'
      echo ' product-gallery__media--video'
    endif
    if media.media_type == 'model'
      echo ' product-gallery__media--model'
    endif
  endcapture
-%}

{%- capture interaction_markup -%}
  <button type="button"
    class="deferred-media__poster"
    aria-label="{{ view_string }} {{ image_alt }}"
    data-deferred-media-button
  >
    <span class="deferred-media__poster-button">
      {%- if media.media_type == 'model' -%}
        {%- render 'icon-media-model' -%}
      {%- else -%}
        {%- render 'icon-media-video' -%}
      {%- endif -%}
    </span>

    {{ image }}
  </button>
{%- endcapture -%}

<div id="{{ media_wrapper_id }}"
  class="product-gallery__media-slide{% unless featured_media == media %} media--hidden{% endunless %}"
  data-product-slide
  data-id="{{ media.id }}"
  data-aspectratio="{{ media_aspect_ratio }}"
  data-media-id="{{ unique }}-{{ media.id }}"
  data-type="{{ media.media_type }}"
  {% if media.media_type == 'video' or media.media_type == 'external_video' %}
    data-video
    data-video-id="{{ media.id }}"
    data-enable-video-looping="{{ enable_video_looping }}"
  {% endif %}
  {% if media.media_type == 'model' %}
    data-model
    data-model-id="{{ media.id }}"
  {% endif %}
  {% if media.media_type == 'external_video' %}
    data-youtube-id="{{ media.external_id }}"
  {% endif %}
  data-product-single-media-wrapper
>
  {%- if media.media_type == 'image' -%}
    <div class="product-gallery__media product-gallery__media--image">
      <div class="product-gallery__media-space" style="--media-padding-top: {{ media_padding_top }}%;"></div>
      <button
              class="swym-button swym-add-to-wishlist"
              data-with-epi="true"
              data-swaction="addToWishlist"
              data-product-id="{{ product.id }}"
              data-variant-id="{{ product.variants[0].id }}"
              data-product-url="{{ shop.url }}{{ product.url }}"
            >
        <svg class="swym-icon-unfilled" height="25px" viewBox="0.0 0 1792.0 2048" width="25px">
          <path d="M1664,724c0-54-7.167-101.667-21.5-143s-32.667-74.167-55-98.5S1538,438.333,1506,423s-63.333-25.667-94-31s-63.333-8-98-8  s-72,8.5-112,25.5s-76.833,38.333-110.5,64s-62.5,49.667-86.5,72s-44,42.833-60,61.5c-12,14.667-28.333,22-49,22s-37-7.333-49-22  c-16-18.667-36-39.167-60-61.5s-52.833-46.333-86.5-72s-70.5-47-110.5-64S512.667,384,478,384s-67.333,2.667-98,8s-62,15.667-94,31  s-59.167,35.167-81.5,59.5s-40.667,57.167-55,98.5S128,670,128,724c0,112,62.333,230.333,187,355l581,560l580-559  C1601.333,954.667,1664,836,1664,724z M1792,724c0,147.333-76.333,297.333-229,450l-623,600c-12,12-26.667,18-44,18s-32-6-44-18  l-624-602c-6.667-5.333-15.833-14-27.5-26s-30.167-33.833-55.5-65.5s-48-64.167-68-97.5s-37.833-73.667-53.5-121S0,768.667,0,724  c0-146.667,42.333-261.333,127-344s201.667-124,351-124c41.333,0,83.5,7.167,126.5,21.5s83,33.667,120,58s68.833,47.167,95.5,68.5  s52,44,76,68c24-24,49.333-46.667,76-68s58.5-44.167,95.5-68.5s77-43.667,120-58S1272.667,256,1314,256  c149.333,0,266.333,41.333,351,124S1792,577.333,1792,724z"/>
        </svg>
        <svg class="swym-icon-filled" viewBox="0 0 512 512" height="25px" width="25px">
          <path d="M47.6 300.4L228.3 469.1c7.5 7 17.4 10.9 27.7 10.9s20.2-3.9 27.7-10.9L464.4 300.4c30.4-28.3 47.6-68 47.6-109.5v-5.8c0-69.9-50.5-129.5-119.4-141C347 36.5 300.6 51.4 268 84L256 96 244 84c-32.6-32.6-79-47.5-124.6-39.9C50.5 55.6 0 115.2 0 185.1v5.8c0 41.5 17.2 81.2 47.6 109.5z"/>
        </svg>
      </button>
      {{ image }}

      {%- if enable_zoom and section_type != 'quickview' -%}
        <a href="{{ media | product_img_url: image_zoom_size }}"
          class="product-gallery__media-link"
          rel="lightbox"
          data-zoom-wrapper
          data-image-width="{{ media.width }}"
          data-image-height="{{ media.height }}">
          <span class="visually-hidden">{{ 'general.accessibility.product_image_lightbox' | t }}</span>
        </a>
      {%- endif -%}
    </div>
  {%- else -%}

    {%- case media.media_type -%}
      {%- when 'external_video' or 'video' or 'model' -%}
        <deferred-media class="{{ deferred_media_classes }}"
          data-deferred-media
          style="padding-top: {{ media_padding_top }}%;"
          {% if media.media_type != 'external_video' %} data-loop="{{ enable_video_looping }}"{% endif %}
        >
          {{ interaction_markup }}

          <template>
            {{ media_display }}
          </template>
        </deferred-media>

      {%- else -%}
        <div class="product-gallery__media" style="padding-top: {{ media_padding_top }}%;">
          {{ media_display }}
        </div>
    {%- endcase -%}
  {%- endif -%}
</div>
